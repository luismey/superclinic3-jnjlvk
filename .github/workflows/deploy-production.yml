# Production deployment workflow for Porfin WhatsApp automation platform
# Version: 1.0.0
# Implements strict quality gates, security checks and progressive rollout
name: Deploy to Production

# Trigger on main branch pushes or manual dispatch with version
on:
  push:
    branches: 
      - main
    paths:
      - 'src/backend/**'
      - 'src/web/**'
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string

# Environment variables
env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: southamerica-east1
  ENVIRONMENT: production

# Ensure only one production deployment runs at a time
concurrency:
  group: production
  cancel-in-progress: false

# Required permissions for the workflow
permissions:
  contents: read
  id-token: write
  deployments: write

jobs:
  build-and-test-backend:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/backend/requirements.txt
          pip install pytest pytest-cov bandit mypy

      - name: Run unit tests with coverage
        run: |
          pytest src/backend/tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-fail-under=90

      - name: Run security scan
        run: bandit -r src/backend/ -ll

      - name: Run type checking
        run: mypy src/backend/

  build-and-test-frontend:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: |
          cd src/web
          yarn install --frozen-lockfile

      - name: Run tests with coverage
        run: |
          cd src/web
          yarn test --coverage --threshold=90

      - name: Run security audit
        run: |
          cd src/web
          yarn audit --level high

      - name: Run type checking
        run: |
          cd src/web
          yarn tsc --noEmit

  deploy-production:
    name: Deploy to Production
    needs: [build-and-test-backend, build-and-test-frontend]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://app.porfin.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Auth GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          install_components: 'beta,kubectl'

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Build and push backend
        run: |
          docker build -t gcr.io/${{ env.GCP_PROJECT_ID }}/backend:${{ github.sha }} \
                      -t gcr.io/${{ env.GCP_PROJECT_ID }}/backend:latest \
                      -f src/backend/Dockerfile src/backend/
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/backend:${{ github.sha }}
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/backend:latest

      - name: Build and push frontend
        run: |
          docker build -t gcr.io/${{ env.GCP_PROJECT_ID }}/frontend:${{ github.sha }} \
                      -t gcr.io/${{ env.GCP_PROJECT_ID }}/frontend:latest \
                      -f src/web/Dockerfile src/web/
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/frontend:${{ github.sha }}
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/frontend:latest

      - name: Deploy to Cloud Run
        run: |
          # Deploy backend with production configuration
          gcloud run deploy backend-prod \
            --image gcr.io/${{ env.GCP_PROJECT_ID }}/backend:${{ github.sha }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --min-instances 2 \
            --max-instances 20 \
            --memory 4Gi \
            --cpu 2 \
            --port 8000 \
            --set-env-vars "ENVIRONMENT=production" \
            --allow-unauthenticated

          # Deploy frontend with production configuration
          gcloud run deploy frontend-prod \
            --image gcr.io/${{ env.GCP_PROJECT_ID }}/frontend:${{ github.sha }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --min-instances 2 \
            --max-instances 10 \
            --memory 2Gi \
            --cpu 1 \
            --port 3000 \
            --set-env-vars "ENVIRONMENT=production" \
            --allow-unauthenticated

      - name: Progressive Traffic Rollout
        run: |
          echo "Starting progressive rollout for backend..."
          
          # Initial 10% traffic to new version
          gcloud run services update-traffic backend-prod \
            --to-revisions=LATEST=10
          
          # Wait 5 minutes and monitor
          sleep 300
          
          # Increase to 50% if no issues
          gcloud run services update-traffic backend-prod \
            --to-revisions=LATEST=50
          
          # Wait 5 minutes and monitor
          sleep 300
          
          # Route 100% traffic if stable
          gcloud run services update-traffic backend-prod \
            --to-revisions=LATEST=100

      - name: Run smoke tests
        run: |
          # Health check endpoints
          curl -f https://api.porfin.com/_health
          curl -f https://app.porfin.com

      - name: Create release tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git tag v${{ github.event.inputs.version }}
          git push origin v${{ github.event.inputs.version }}

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}