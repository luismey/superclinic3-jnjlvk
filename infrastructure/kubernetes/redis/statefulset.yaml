apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-statefulset
  labels:
    app: redis
    component: cache
    part-of: porfin
    managed-by: kubernetes
spec:
  serviceName: redis-service
  # Single replica as per requirements specifying cluster mode disabled
  replicas: 1
  selector:
    matchLabels:
      app: redis
      component: cache
  template:
    metadata:
      labels:
        app: redis
        component: cache
        part-of: porfin
        managed-by: kubernetes
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "6379"
    spec:
      # Pod anti-affinity to ensure Redis pods are scheduled on different nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - redis
              topologyKey: kubernetes.io/hostname
      containers:
      - name: redis
        # Redis 7.0 Alpine for minimal footprint
        image: redis:7.0-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        resources:
          # 4GB memory as specified in requirements
          requests:
            memory: "4Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "1000m"
        volumeMounts:
        - name: redis-config
          mountPath: /usr/local/etc/redis/redis.conf
          subPath: redis.conf
        - name: redis-data
          mountPath: /data
        command:
        - redis-server
        - /usr/local/etc/redis/redis.conf
        # Health checks for Redis container
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
      # Mount Redis configuration from ConfigMap
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      # Security context for Redis container
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      terminationGracePeriodSeconds: 60
  # Persistent volume claim for Redis data
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: "10Gi"
      storageClassName: standard
  # Update strategy for StatefulSet
  updateStrategy:
    type: RollingUpdate