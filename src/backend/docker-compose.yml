version: "3.8"

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    volumes:
      - type: bind
        source: .
        target: /app
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - UVICORN_RELOAD=true
      - UVICORN_WORKERS=1
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - type: volume
        source: redis_data
        target: /data
    command: [
      "redis-server",
      "--maxmemory", "4gb",
      "--maxmemory-policy", "allkeys-lru",
      "--appendonly", "yes",
      "--save", "900", "1",
      "--save", "300", "10",
      "--save", "60", "10000"
    ]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
        reservations:
          cpus: '0.25'
          memory: 1G

volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: /data/redis
      o: bind

networks:
  backend:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1
    driver_opts:
      com.docker.network.bridge.name: porfin_backend
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"